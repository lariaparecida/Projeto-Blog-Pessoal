package com.generation.blogpessoal.repository;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param; //import org.springframework.stereotype.Repository; REMOVIDO;

import com.generation.blogpessoal.model.Postagem;

//@Repository atualmente desnecess√°rio
public interface PostagemRepository extends JpaRepository<Postagem, Long>{ //interface(class not) que auxilia na intera√ß√£o com o MySQL e herda a JPA, cont√©m diversos M√©todos pr√©-implementados para a gera√ß√£o de consultas SQL, que ser√£o utilizadas para manipular os dados da entidade Postagem
//seus m√©todos s√£o implementados na classe controller // <Postagem, Long> VEM COMO PAR√ÇMETRO PARA A JPA, 1¬∫ CLASS POSTAGEM E 2¬∫ O LONG ID DENTRO DA POSTAGEM
	public List <Postagem> findAllByTituloContainingIgnoreCase(@Param("titulo")String titulo);
	
}
/*Na declara√ß√£o public interface PostagemRepository extends JpaRepository<Postagem, Long>, a interface PostagemRepository estende a interface JpaRepository do Spring Data JPA, que √© uma interface gen√©rica que fornece m√©todos de acesso a dados comuns para uma entidade JPA.

Os dois par√¢metros fornecidos √† interface JpaRepository representam os tipos da entidade e do ID da entidade, respectivamente. No caso da interface PostagemRepository, a entidade √© a classe Postagem e o ID √© do tipo Long.

Ao fornecer esses tipos para a interface JpaRepository, o Spring Data JPA √© capaz de gerar automaticamente implementa√ß√µes dos m√©todos b√°sicos de acesso a dados, como save(), findById(), findAll(), deleteById(), entre outros, para a entidade Postagem. Isso permite que voc√™ escreva menos c√≥digo boilerplate e se concentre mais na l√≥gica de neg√≥cios da sua aplica√ß√£o.*/

// A Interface JpaRepository cont√©m todos os M√©todos necess√°rios para cria√ß√£o de um CRUD.

//Query Method s√£o M√©todos de Consulta personalizados, que permitem criar consultas espec√≠ficas com qualquer Atributo da Classe associada a Interface Reposit√≥rio (Postagem). Como a Interface JpaRepository possui apenas um M√©todo de consulta espec√≠fico pelo id (findById( Long id)), que √© um Atributo comum em todas as Classes Model do Projeto, atrav√©s das Query Methods podemos ampliar as nossas op√ß√µes de consulta. As Query Methods s√£o declaradas na Interface Reposit√≥rio e implementadas nas Classes Controladoras e de Servi√ßos (Service, que veremos mais a frente).

// AQUI QUE VAI FICAR AS QUERY METHODS, QUE S√ÉO FORMAS PERSONALIZADAS DE SE PESQUISAR

//Query Methods fazem s√£o criar instru√ß√µes SQL atrav√©s de Palavras Chave, que combinadas com os Atributos da Classe, geram consultas personalizadas

/*ex: public Optional <Postagem> findByTitulo(String titulo); equivale a SELECT * FROM tb_postagens WHERE titulo = "titulo";*/

/*	find			ü°™	SELECT
	By				ü°™	WHERE
	Titulo			ü°™	Atributo da Classe Postagem
	String titulo	ü°™	Par√¢metro do M√©todo contendo o t√≠tulo que voc√™ deseja procurar.*/

/*ex: Query Method

public List <Postagem> findAllByTituloContainingIgnoreCase(@Param("titulo") String titulo);

Instru√ß√£o SQL equivalente

SELECT * FROM tb_postagens WHERE titulo LIKE "%titulo%";*/

/*	find				ü°™	SELECT
	All					ü°™	*
	By					ü°™	WHERE
	Titulo				ü°™	Atributo da Classe Postagem
	Containing			ü°™	LIKE "%titulo%"
	IgnoreCase			ü°™	Ignorando letras mai√∫sculas ou min√∫sculas
	@Param("titulo")	ü°™	Define a vari√°vel String titulo como um par√¢metro da consulta. Esta anota√ß√£o √© obrigat√≥rio em consultas do tipo Like.
	String titulo		ü°™	Par√¢metro do M√©todo contendo o t√≠tulo que voc√™ deseja procurar.*/

/*Consultar mais op√ß√µes aqui https://github.com/rafaelq80/cookbook_spring_v3/blob/main/03_spring/guia_jpa.md*/


